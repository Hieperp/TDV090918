@using TotalBase.Enums;
@using TotalPortal.Configuration

@model TotalPortal.Areas.Productions.ViewModels.SemifinishedHandoverViewModel

<div id="popupWindow"></div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "MainForm" }))
{
    @Html.AntiForgeryToken()

    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTop.cshtml")
    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTopB.cshtml")

    @Html.HiddenFor(model => model.SemifinishedHandoverID)

    <div class="left-panel">

        @Html.Partial("~/Views/Helpers/Bases/_BaseSectionLeftA.cshtml")


        @Html.HiddenFor(model => model.WorkshiftID)                

        <div class="form-group">
            @Html.LabelFor(model => model.WorkshiftCode)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => model.WorkshiftCode).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.WorkshiftCode, "", new { @class = "text-danger" })
            </div>
        </div>        

        <div class="form-group">
            @Html.LabelFor(model => model.WorkshiftEntryDate)
            <div class="div-input">
                @Html.Kendo().DateTimePickerFor(model => model.WorkshiftEntryDate).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.WorkshiftEntryDate, "", new { @class = "text-danger" })
            </div>
        </div>   
        
        <div class="form-group">
            @Html.EditorFor(d => d.SemifinishedLeader, new { EmployeeDisplayName = @Model.GetDisplayName(m => m.SemifinishedLeader) })
        </div>   
        
        <div class="form-group">
            @Html.EditorFor(d => d.FinishedLeader, new { EmployeeDisplayName = @Model.GetDisplayName(m => m.FinishedLeader) })
        </div>                      

    </div>

    <div class="right-panel">

        <div class="right-top-panel right-top-panel-H2">

            @Html.EditorFor(d => d.Customer, new { CustomerDisplayName = @Model.GetDisplayName(m => m.Customer), CustomerIcon = "Customer Red 24.png", NullCustomer = (Model.CustomerID > 0 ? null : "Bàn giao phôi định hình tổng hợp của nhiều khách hàng"), CustomerInfo = (Model.CustomerID > 0 ? null : "#") })
            
        </div>

        <div class="div-k-grid-detail">
            @(Html.Kendo().Grid(Model.SemifinishedHandoverViewDetails)
                .Name("kendoGridDetails")
                .Columns(columns =>
                {

                    columns.Bound(p => p.SemifinishedHandoverDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= SemifinishedHandoverDetailID #" + "<input type='hidden' name='SemifinishedHandoverViewDetails[#= index(data) #].SemifinishedHandoverDetailID' value='#= SemifinishedHandoverDetailID #' />");
                    columns.Bound(p => p.SemifinishedHandoverID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= SemifinishedHandoverID #" + "<input type='hidden' name='SemifinishedHandoverViewDetails[#= index(data) #].SemifinishedHandoverID' value='#= SemifinishedHandoverID #' />");

                    columns.Bound(p => p.SemifinishedProductID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (SemifinishedProductID == null)? '' : SemifinishedProductID #" + "<input type='hidden' name='SemifinishedHandoverViewDetails[#= index(data) #].SemifinishedProductID' value='#= (SemifinishedProductID == null) ? '' : SemifinishedProductID #' />");
                    columns.Bound(p => p.SemifinishedProductDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (SemifinishedProductDetailID == null)? '' : SemifinishedProductDetailID #" + "<input type='hidden' name='SemifinishedHandoverViewDetails[#= index(data) #].SemifinishedProductDetailID' value='#= (SemifinishedProductDetailID == null) ? '' : SemifinishedProductDetailID #' />");

                    //columns.Bound(p => p.SemifinishedProductCode).DisplayNameTitle().Width(60)
                    //    .ClientTemplate("#= (SemifinishedProductCode == null)? '' : SemifinishedProductCode #" + "<input type='hidden' name='SemifinishedHandoverViewDetails[#= index(data) #].SemifinishedProductCode' value='#= (SemifinishedProductCode == null) ? '' : SemifinishedProductCode #' />");
                    //columns.Bound(p => p.SemifinishedProductReference).DisplayNameTitle().Width(80)
                    //    .ClientTemplate("#= (SemifinishedProductReference == null)? '' : SemifinishedProductReference #" + "<input type='hidden' name='SemifinishedHandoverViewDetails[#= index(data) #].SemifinishedProductReference' value='#= (SemifinishedProductReference == null) ? '' : SemifinishedProductReference #' />");

                    columns.Bound(p => p.SemifinishedProductEntryDate).DisplayNameTitle().Width(80)
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (SemifinishedProductEntryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', SemifinishedProductEntryDate) #" + "<input type='hidden' name='SemifinishedHandoverViewDetails[#= index(data) #].SemifinishedProductEntryDate' value='#= (SemifinishedProductEntryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', SemifinishedProductEntryDate) #' />");


                    columns.Bound(p => p.CustomerID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CustomerID #" + "<input type='hidden' name='SemifinishedHandoverViewDetails[#= index(data) #].CustomerID' value='#= CustomerID #' />");
                    columns.Bound(p => p.CustomerCode).DisplayNameTitle().Width(80)
                        .ClientTemplate("#= CustomerCode #" + "<input type='hidden' name='SemifinishedHandoverViewDetails[#= index(data) #].CustomerCode' value='#= CustomerCode #' />");

                    columns.Bound(p => p.CommodityID).DisplayNameTitle().Hidden()
                      .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='SemifinishedHandoverViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                    columns.Bound(p => p.CommodityCode).DisplayNameTitle().Width(120)
                        .ClientTemplate("#= CommodityCode #" + "<input type='hidden' name='SemifinishedHandoverViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />");
                    columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Hidden()
                     .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='SemifinishedHandoverViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");

                    columns.Bound(p => p.ProductionLineID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= ProductionLineID #" + "<input type='hidden' name='SemifinishedHandoverViewDetails[#= index(data) #].ProductionLineID' value='#= ProductionLineID #' />");
                    columns.Bound(p => p.ProductionLineCode).DisplayNameTitle().Width(100)
                        .ClientTemplate("#= (ProductionLineCode == null)? '' : ProductionLineCode #" + "<input type='hidden' name='SemifinishedHandoverViewDetails[#= index(data) #].ProductionLineCode' value='#= (ProductionLineCode == null) ? '' : ProductionLineCode #' />");

                    columns.Bound(p => p.CrucialWorkerID).DisplayNameTitle().Hidden();
                    columns.Bound(p => p.CrucialWorkerName).DisplayNameTitle().Width(100)
                       .ClientTemplate("#= CrucialWorkerName #" + "<input type='hidden' name='SemifinishedHandoverViewDetails[#= index(data) #].CrucialWorkerName' value='#= CrucialWorkerName #' />");

                    columns.Bound(p => p.Quantity).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(50)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', Quantity) #" + "<input type='hidden' name='SemifinishedHandoverViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />");

                    columns.Bound(p => p.QuantityGainings).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(50)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityGainings) #" + "<input type='hidden' name='SemifinishedHandoverViewDetails[#= index(data) #].QuantityGainings' value='#= QuantityGainings #' />");
                    
                    columns.Bound(p => p.Remarks).DisplayNameTitle().Width(120)
                        .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='SemifinishedHandoverViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");


                    columns.Bound(p => p.InActivePartial).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (InActivePartial == null)? '' : InActivePartial #" + "<input type='hidden' name='SemifinishedHandoverViewDetails[#= index(data) #].InActivePartial' value='#= (InActivePartial == null) ? '' : InActivePartial #' />");

                    columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(50).Hidden(!@Model.Editable).HtmlAttributes(new { @class = "grid-column-center" });

                    columns.Template(model => null).HtmlAttributes(new { @class = "grid-column-center" }).Width(50).Hidden(!@Model.Voidable && !@Model.UnVoidable)
                        .ClientTemplate("<a class='k-button' style='padding:0px;' onclick='callVoidDetail(#= SemifinishedProductDetailID #)'><span class='k-icon k-edit'></span></a>");
                   
                })
                    .Filterable(f => f.Enabled(false))
                    .Navigatable()

                    .ToolBar(toolbar =>
                    {
                        if (Model.Editable)
                        {
                            //toolbar.Create().HtmlAttributes(new { @class = "fa fa-map-marker" }).Text("Add new aa le ea1");
                            toolbar.Template(@<text>
                                <button type="button" class="k-button" onclick="GetPendingDetails()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Chọn mặt hàng từ BTP chưa giao </button>
                            </text>);
                        }
                        else
                        {//Add a functionless button for display purpose only
                            toolbar.Template(
                                @<text>
                                    <div>
                                        @(Html.Kendo().Button()
                                            .Name("iconButton")
                                            .HtmlAttributes(new { type = "button" })
                                            .SpriteCssClass("k-icon k-i-ungroup") //.Content("My button label")
                                        )
                                    </div>
                                </text>);
                        }
                    })

                    .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                    .Selectable(settings =>
                    {
                        settings.Mode(GridSelectionMode.Multiple);
                        settings.Type(GridSelectionType.Row);
                    })
                    .Events(events =>
                    {
                        events.DataBound(@<text>
                            function(e) {

                            var grid = $("#kendoGridDetails").data("kendoGrid");
                            var data = grid.dataSource.data();
                            $.each(data, function (i, row) {
                            var isWarrantyClaim = row.VoidTypeName;
                            if (isWarrantyClaim != null && isWarrantyClaim != '') {
                            $('tr[data-uid="' + row.uid + '"]').addClass("isBonus");
                            }
                            });
                            }
                        </text>);
                    }).DataSource(dataSource => dataSource
                        .Ajax()
                        .Batch(true)
                        .ServerOperation(false)
                        .Model(model =>
                        {
                            model.Id(x => x.SemifinishedHandoverDetailID);
                            model.Field(m => m.SemifinishedHandoverDetailID).DefaultValue(0);
                            model.Field(m => m.SemifinishedHandoverID).DefaultValue(@Model.SemifinishedHandoverID);
                        })
                        .Events(events =>
                        {
                            events.Error("kendGrid_ErrorHandler");
                        })                                                
                        .Aggregates(a => a.Add(x => x.Quantity).Sum())
                        .Aggregates(a => a.Add(x => x.QuantityGainings).Sum())
                    )
            )
        </div>

        <div class="div-k-panel">
            @(Html.Kendo().PanelBar()
                .Name("IntroPanelBar")
                .Items(items =>
                {
                    items.Add()
                        .Text("Thông tin khác")
                        .Selected(true)
                        .Expanded(false)
                        .Content(@<text>
                            <div class="right-first-panel">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Description, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => model.Description).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="right-second-panel">
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PreparedPerson.cshtml")
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Approver.cshtml")
                            </div>

                        </text>).HtmlAttributes(new { @class = "panel-class" });
                })
            )
        </div>


        <div class="right-botton-panel">
            @if (Model.Editable)
            {
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "SemifinishedHandovers")"> <img src="~/Content/Images/New/save-icon.png" /> Lưu phiếu </button>
            }
            else
            {
                if (!Model.Voidable && !Model.UnVoidable)
                {
                    <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Print", "SemifinishedHandovers", new { id = @Model.SemifinishedHandoverID })'"> <img src="~/Content/Images/New/Apps-printer-icon.png" /> In tổng hợp xuất kho </button>
                }
            }

            @if (Model.SemifinishedHandoverID > 0 && !Model.Approvable && !Model.UnApprovable)
            {
                <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Approve", "SemifinishedHandovers", new {id = @Model.SemifinishedHandoverID })'"> <img src="~/Content/Images/Mains/@(!@Model.Approved ? "Actions-ok-icon32.png" : "Cross-icon-cancel32.png")" /> @(!Model.Approved ? "Duyệt đơn hàng" : "Hủy duyệt đơn hàng này") </button>
            }
        </div>


        @Html.Partial("~/Views/Helpers/Bases/_BaseSubmit.cshtml")

    </div>
}


<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>

<script type="text/javascript">
    function GetPendingDetails() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("GetPendingDetails", "SemifinishedHandovers", new { area = "Productions" })", "Chọn mặt hàng từ bán thành phẩm", "@Settings.PopupWidthLarge", "@Settings.PopupHeightWithTab");
        });
    }
</script>
